name: Garmin CN to Garmin

on:
  workflow_dispatch:
  schedule:
    - cron: '0 21 * * *'
  push:
    branches:
      - master
    paths:
      - run_page/nike_sync.py
      - run_page/nike_to_strava_sync.py
      - run_page/strava_sync.py
      - run_page/gen_svg.py
      - run_page/garmin_sync.py
      - run_page/keep_sync.py
      - run_page/gpx_sync.py
      - run_page/tcx_sync.py
      - run_page/garmin_to_strava_sync.py
      - requirements.txt

env:
  # please change to your own config.
  RUN_TYPE: garmin_sync_cn_global # support strava/nike/garmin/garmin_cn/garmin_sync_cn_global/keep/only_gpx/only_fit/nike_to_strava/strava_to_garmin/strava_to_garmin_cn/garmin_to_strava/garmin_to_strava_cn/codoon, Please change the 'pass' it to your own
  ATHLETE: wenqiang
  TITLE: Workouts
  MIN_GRID_DISTANCE: 10 # change min distance here
  TITLE_GRID: Over 10km Workouts # also here
  GITHUB_NAME: wenqiangtxc  # change to yours
  GITHUB_EMAIL: wenqiangtxc@gmail.com # change to yours

  # IGNORE_BEFORE_SAVING: True # if you want to ignore some data before saving, set this to True
  IGNORE_START_END_RANGE: 0 # Unit meter
  # Dont making this huge, just picking points you needing. https://developers.google.com/maps/documentation/utilities/polylineutility using this tool to making your polyline
  IGNORE_POLYLINE: ""
  IGNORE_RANGE: 0 # Unit meter
  SAVE_DATA_IN_GITHUB_CACHE: false # if you deploy in the vercal, check the README
  DATA_CACHE_PREFIX: 'track_data'
  BUILD_GH_PAGES: true # If you do not need GitHub Page please set it to `false`

jobs:
  sync:
    name: Sync
    runs-on: ubuntu-latest
    outputs:
      SAVE_DATA_IN_GITHUB_CACHE: ${{ steps.set_output.outputs.SAVE_DATA_IN_GITHUB_CACHE }}
      DATA_CACHE_PREFIX: ${{ steps.set_output.outputs.DATA_CACHE_PREFIX }}
      BUILD_GH_PAGES: ${{ steps.set_output.outputs.BUILD_GH_PAGES }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        id: setup_python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: pip
          cache-dependency-path: 'requirements.txt'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Cache Data Files
        if: env.SAVE_DATA_IN_GITHUB_CACHE == 'true'
        uses: actions/cache@v3
        with:
          path: |
            activities
            assets
            GPX_OUT
            TCX_OUT
            FIT_OUT
            Workouts
            run_page/data.db
            src/static/activities.json
            imported.json
          key: ${{ env.DATA_CACHE_PREFIX }}-${{ github.sha }}-${{ github.run_id }}
          restore-keys: |
            ${{ env.DATA_CACHE_PREFIX }}-${{ github.sha }}-
            ${{ env.DATA_CACHE_PREFIX }}-

      - name: Run sync Nike script
        if: env.RUN_TYPE == 'nike'
        run: |
          python run_page/nike_sync.py ${{ secrets.NIKE_REFRESH_TOKEN }}

      - name: Run sync Nike to Strava(Run with nike data backup and show with strava)
        if: env.RUN_TYPE == 'nike_to_strava'
        run: |
          python run_page/nike_to_strava_sync.py ${{ secrets.NIKE_REFRESH_TOKEN }} ${{ secrets.STRAVA_CLIENT_ID }} ${{ secrets.STRAVA_CLIENT_SECRET }} ${{ secrets.STRAVA_CLIENT_REFRESH_TOKEN }}

      - name: Run sync Keep script
        if: env.RUN_TYPE == 'keep'
        run: |
          python run_page/keep_sync.py ${{ secrets.KEEP_MOBILE }} ${{ secrets.KEEP_PASSWORD }} --with-gpx

      - name: Run sync Garmin CN to Garmin script
        if: contains( env.RUN_TYPE, 'garmin_sync_cn_global' )
        run: |
          # make garimin secret string `python run_page/garmin_sync_cn_global.py ${email} ${password} --is-cn
          python run_page/garmin_sync_cn_global.py ${{ secrets.GARMIN_SECRET_STRING_CN }} ${{ secrets.GARMIN_SECRET_STRING }}  --only-run
        # If you only want to sync `type running` add args --only-run, default script is to sync all data (rides and runs).
        # python run_page/garmin_sync_cn_global.py ${{ secrets.GARMIN_SECRET_STRING_CN }} ${{ secrets.GARMIN_SECRET_STRING }}  --only-run

      - name: Run sync Strava script
        if: contains( env.RUN_TYPE, 'strava' )
        run: |
          python run_page/strava_sync.py ${{ secrets.STRAVA_CLIENT_ID }} ${{ secrets.STRAVA_CLIENT_SECRET }} ${{ secrets.STRAVA_CLIENT_REFRESH_TOKEN }} ${{ vars.STRAVA_OPTIONS }}
        # If you only want to sync `type running` add args --only-run, default script is to sync all data (rides and runs).

      - name: Run sync Codoon script
        if: env.RUN_TYPE == 'codoon'
        run: |
          python run_page/codoon_sync.py ${{ secrets.CODOON_MOBILE }} ${{ secrets.CODOON_PASSWORD }}

      # for garmin if you want generate `tcx` you can add --tcx command in the args.
      - name: Run sync Garmin script
        if: env.RUN_TYPE == 'garmin'
        run: |
          # python run_page/get_garmin_secret.py ${secrets.GARMIN_EMAIL} ${secrets.GARMIN_PASSWORD}
          python run_page/garmin_sync.py ${{ secrets.GARMIN_SECRET_STRING }}
        # If you only want to sync `type running` add args --only-run, default script is to sync all data (rides and runs).
        # python run_page/garmin_sync.py ${{ secrets.GARMIN_SECRET_STRING }} --only-run

      - name: Run sync Garmin CN script
        if: env.RUN_TYPE == 'garmin_cn'
        run: |
          # python run_page/get_garmin_secret.py ${secrets.GARMIN_CN_EMAIL} ${secrets.GARMIN_CN_PASSWORD} --is-cn
          python run_page/garmin_sync.py ${{ secrets.GARMIN_SECRET_STRING_CN }} --is-cn
        # If you only want to sync `type running` add args --only-run, default script is to sync all data (rides and runs).
        # python run_page/garmin_sync.py ${{ secrets.GARMIN_SECRET_STRING_CN }}  --only-run --is-cn

      - name: Run sync Only GPX script
        if: env.RUN_TYPE == 'only_gpx'
        run: |
          python run_page/gpx_sync.py

      - name: Run sync Only FIT script
        if: env.RUN_TYPE == 'only_fit'
        run: |
          python run_page/fit_sync.py

      - name: Run sync Only TCX script
        if: env.RUN_TYPE == 'only_tcx'
        run: |
          python run_page/tcx_sync.py

      - name: Run sync Strava to Garmin(Run with strava(or others upload to strava) data backup in Garmin)
        if: env.RUN_TYPE == 'strava_to_garmin'
        run: |
          python run_page/strava_to_garmin_sync.py ${{ secrets.STRAVA_CLIENT_ID }} ${{ secrets.STRAVA_CLIENT_SECRET }} ${{ secrets.STRAVA_CLIENT_REFRESH_TOKEN }}  ${{ secrets.GARMIN_SECRET_STRING }} ${{ secrets.STRAVA_EMAIL }} ${{ secrets.STRAVA_PASSWORD }}

      - name: Run sync Strava to Garmin-cn(Run with strava(or others upload to strava) data backup in Garmin-cn)
        if: env.RUN_TYPE == 'strava_to_garmin_cn'
        run: |
          python run_page/strava_to_garmin_sync.py ${{ secrets.STRAVA_CLIENT_ID }} ${{ secrets.STRAVA_CLIENT_SECRET }} ${{ secrets.STRAVA_CLIENT_REFRESH_TOKEN }}  ${{ secrets.GARMIN_SECRET_STRING_CN }} ${{ secrets.STRAVA_EMAIL }} ${{ secrets.STRAVA_PASSWORD }} --is-cn

      - name: Run sync Garmin-cn to Strava(Run with Garmin data backup in Strava)
        if: env.RUN_TYPE == 'garmin_to_strava_cn'
        run: |
          python run_page/garmin_to_strava_sync.py ${{ secrets.STRAVA_CLIENT_ID }} ${{ secrets.STRAVA_CLIENT_SECRET }} ${{ secrets.STRAVA_CLIENT_REFRESH_TOKEN }}  ${{ secrets.GARMIN_SECRET_STRING_CN }}  --is-cn

      - name: Run sync Garmin to Strava(Run with Garmin data backup in Strava)
        if: env.RUN_TYPE == 'garmin_to_strava'
        run: |
          python run_page/garmin_to_strava_sync.py ${{ secrets.STRAVA_CLIENT_ID }} ${{ secrets.STRAVA_CLIENT_SECRET }} ${{ secrets.STRAVA_CLIENT_REFRESH_TOKEN }}  ${{ secrets.GARMIN_EMAIL }} ${{ secrets.GARMIN_PASSWORD }}

      - name: Clear Activity File
        id: clear
        run: |
          python run_page/clear_activity_file.py
